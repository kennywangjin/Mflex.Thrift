/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace Mflex.Thrift
{
    public partial class THBaseService
    {
        public interface IAsync
        {
            /// <summary>
            /// Test for the existence of columns in the table, as specified in the TGet.
            /// 
            /// @return true if the specified TGet matches one or more keys, false if not
            /// </summary>
            /// <param name="table">the table to check on</param>
            /// <param name="tget">the TGet to check for</param>
            Task<bool> existsAsync(byte[] table, TGet tget, CancellationToken cancellationToken = default(CancellationToken));

            /// <summary>
            /// Test for the existence of columns in the table, as specified by the TGets.
            /// 
            /// This will return an array of booleans. Each value will be true if the related Get matches
            /// one or more keys, false if not.
            /// </summary>
            /// <param name="table">the table to check on</param>
            /// <param name="tgets">a list of TGets to check for</param>
            Task<List<bool>> existsAllAsync(byte[] table, List<TGet> tgets, CancellationToken cancellationToken = default(CancellationToken));

            /// <summary>
            /// Method for getting data from a row.
            /// 
            /// If the row cannot be found an empty Result is returned.
            /// This can be checked by the empty field of the TResult
            /// 
            /// @return the result
            /// </summary>
            /// <param name="table">the table to get from</param>
            /// <param name="tget">the TGet to fetch</param>
            Task<TResult> @getAsync(byte[] table, TGet tget, CancellationToken cancellationToken = default(CancellationToken));

            /// <summary>
            /// Method for getting multiple rows.
            /// 
            /// If a row cannot be found there will be a null
            /// value in the result list for that TGet at the
            /// same position.
            /// 
            /// So the Results are in the same order as the TGets.
            /// </summary>
            /// <param name="table">the table to get from</param>
            /// <param name="tgets">a list of TGets to fetch, the Result listwill have the Results at corresponding positionsor null if there was an error</param>
            Task<List<TResult>> getMultipleAsync(byte[] table, List<TGet> tgets, CancellationToken cancellationToken = default(CancellationToken));

            /// <summary>
            /// Commit a TPut to a table.
            /// </summary>
            /// <param name="table">the table to put data in</param>
            /// <param name="tput">the TPut to put</param>
            Task putAsync(byte[] table, TPut tput, CancellationToken cancellationToken = default(CancellationToken));

            /// <summary>
            /// Atomically checks if a row/family/qualifier value matches the expected
            /// value. If it does, it adds the TPut.
            /// 
            /// @return true if the new put was executed, false otherwise
            /// </summary>
            /// <param name="table">to check in and put to</param>
            /// <param name="row">row to check</param>
            /// <param name="family">column family to check</param>
            /// <param name="qualifier">column qualifier to check</param>
            /// <param name="value">the expected value, if not provided thecheck is for the non-existence of thecolumn in question</param>
            /// <param name="tput">the TPut to put if the check succeeds</param>
            Task<bool> checkAndPutAsync(byte[] table, byte[] row, byte[] family, byte[] qualifier, byte[] @value, TPut tput, CancellationToken cancellationToken = default(CancellationToken));

            /// <summary>
            /// Commit a List of Puts to the table.
            /// </summary>
            /// <param name="table">the table to put data in</param>
            /// <param name="tputs">a list of TPuts to commit</param>
            Task putMultipleAsync(byte[] table, List<TPut> tputs, CancellationToken cancellationToken = default(CancellationToken));

            /// <summary>
            /// Deletes as specified by the TDelete.
            /// 
            /// Note: "delete" is a reserved keyword and cannot be used in Thrift
            /// thus the inconsistent naming scheme from the other functions.
            /// </summary>
            /// <param name="table">the table to delete from</param>
            /// <param name="tdelete">the TDelete to delete</param>
            Task deleteSingleAsync(byte[] table, TDelete tdelete, CancellationToken cancellationToken = default(CancellationToken));

            /// <summary>
            /// Bulk commit a List of TDeletes to the table.
            /// 
            /// Throws a TIOError if any of the deletes fail.
            /// 
            /// Always returns an empty list for backwards compatibility.
            /// </summary>
            /// <param name="table">the table to delete from</param>
            /// <param name="tdeletes">list of TDeletes to delete</param>
            Task<List<TDelete>> deleteMultipleAsync(byte[] table, List<TDelete> tdeletes, CancellationToken cancellationToken = default(CancellationToken));

            /// <summary>
            /// Atomically checks if a row/family/qualifier value matches the expected
            /// value. If it does, it adds the delete.
            /// 
            /// @return true if the new delete was executed, false otherwise
            /// </summary>
            /// <param name="table">to check in and delete from</param>
            /// <param name="row">row to check</param>
            /// <param name="family">column family to check</param>
            /// <param name="qualifier">column qualifier to check</param>
            /// <param name="value">the expected value, if not provided thecheck is for the non-existence of thecolumn in question</param>
            /// <param name="tdelete">the TDelete to execute if the check succeeds</param>
            Task<bool> checkAndDeleteAsync(byte[] table, byte[] row, byte[] family, byte[] qualifier, byte[] @value, TDelete tdelete, CancellationToken cancellationToken = default(CancellationToken));

            Task<TResult> incrementAsync(byte[] table, TIncrement tincrement, CancellationToken cancellationToken = default(CancellationToken));

            Task<TResult> appendAsync(byte[] table, TAppend tappend, CancellationToken cancellationToken = default(CancellationToken));

            /// <summary>
            /// Get a Scanner for the provided TScan object.
            /// 
            /// @return Scanner Id to be used with other scanner procedures
            /// </summary>
            /// <param name="table">the table to get the Scanner for</param>
            /// <param name="tscan">the scan object to get a Scanner for</param>
            Task<int> openScannerAsync(byte[] table, TScan tscan, CancellationToken cancellationToken = default(CancellationToken));

            /// <summary>
            /// Grabs multiple rows from a Scanner.
            /// 
            /// @return Between zero and numRows TResults
            /// </summary>
            /// <param name="scannerId">the Id of the Scanner to return rows from. This is an Id returned from the openScanner function.</param>
            /// <param name="numRows">number of rows to return</param>
            Task<List<TResult>> getScannerRowsAsync(int scannerId, int numRows, CancellationToken cancellationToken = default(CancellationToken));

            /// <summary>
            /// Closes the scanner. Should be called to free server side resources timely.
            /// Typically close once the scanner is not needed anymore, i.e. after looping
            /// over it to get all the required rows.
            /// </summary>
            /// <param name="scannerId">the Id of the Scanner to close *</param>
            Task closeScannerAsync(int scannerId, CancellationToken cancellationToken = default(CancellationToken));

            /// <summary>
            /// mutateRow performs multiple mutations atomically on a single row.
            /// </summary>
            /// <param name="table">table to apply the mutations</param>
            /// <param name="trowMutations">mutations to apply</param>
            Task mutateRowAsync(byte[] table, TRowMutations trowMutations, CancellationToken cancellationToken = default(CancellationToken));

            /// <summary>
            /// Get results for the provided TScan object.
            /// This helper function opens a scanner, get the results and close the scanner.
            /// 
            /// @return between zero and numRows TResults
            /// </summary>
            /// <param name="table">the table to get the Scanner for</param>
            /// <param name="tscan">the scan object to get a Scanner for</param>
            /// <param name="numRows">number of rows to return</param>
            Task<List<TResult>> getScannerResultsAsync(byte[] table, TScan tscan, int numRows, CancellationToken cancellationToken = default(CancellationToken));

            /// <summary>
            /// Given a table and a row get the location of the region that
            /// would contain the given row key.
            /// 
            /// reload = true means the cache will be cleared and the location
            /// will be fetched from meta.
            /// </summary>
            /// <param name="table"></param>
            /// <param name="row"></param>
            /// <param name="reload"></param>
            Task<THRegionLocation> getRegionLocationAsync(byte[] table, byte[] row, bool reload, CancellationToken cancellationToken = default(CancellationToken));

            /// <summary>
            /// Get all of the region locations for a given table.
            /// 
            /// </summary>
            /// <param name="table"></param>
            Task<List<THRegionLocation>> getAllRegionLocationsAsync(byte[] table, CancellationToken cancellationToken = default(CancellationToken));

            /// <summary>
            /// Atomically checks if a row/family/qualifier value matches the expected
            /// value. If it does, it mutates the row.
            /// 
            /// @return true if the row was mutated, false otherwise
            /// </summary>
            /// <param name="table">to check in and delete from</param>
            /// <param name="row">row to check</param>
            /// <param name="family">column family to check</param>
            /// <param name="qualifier">column qualifier to check</param>
            /// <param name="compareOp">comparison to make on the value</param>
            /// <param name="value">the expected value to be compared against, if not provided thecheck is for the non-existence of the column in question</param>
            /// <param name="rowMutations">row mutations to execute if the value matches</param>
            Task<bool> checkAndMutateAsync(byte[] table, byte[] row, byte[] family, byte[] qualifier, TCompareOp compareOp, byte[] @value, TRowMutations rowMutations, CancellationToken cancellationToken = default(CancellationToken));

        }


        public class Client : TBaseClient, IDisposable, IAsync
        {
            public Client(TProtocol protocol) : this(protocol, protocol)
            {
            }

            public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
            {
            }
            public async Task<bool> existsAsync(byte[] table, TGet tget, CancellationToken cancellationToken = default(CancellationToken))
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("exists", TMessageType.Call, SeqId), cancellationToken);

                var args = new existsArgs();
                args.Table = table;
                args.Tget = tget;

                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);

                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new existsResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exists failed: unknown result");
            }

            public async Task<List<bool>> existsAllAsync(byte[] table, List<TGet> tgets, CancellationToken cancellationToken = default(CancellationToken))
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("existsAll", TMessageType.Call, SeqId), cancellationToken);

                var args = new existsAllArgs();
                args.Table = table;
                args.Tgets = tgets;

                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);

                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new existsAllResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "existsAll failed: unknown result");
            }

            public async Task<TResult> @getAsync(byte[] table, TGet tget, CancellationToken cancellationToken = default(CancellationToken))
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("get", TMessageType.Call, SeqId), cancellationToken);

                var args = new getArgs();
                args.Table = table;
                args.Tget = tget;

                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);

                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new getResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get failed: unknown result");
            }

            public async Task<List<TResult>> getMultipleAsync(byte[] table, List<TGet> tgets, CancellationToken cancellationToken = default(CancellationToken))
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("getMultiple", TMessageType.Call, SeqId), cancellationToken);

                var args = new getMultipleArgs();
                args.Table = table;
                args.Tgets = tgets;

                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);

                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new getMultipleResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMultiple failed: unknown result");
            }

            public async Task putAsync(byte[] table, TPut tput, CancellationToken cancellationToken = default(CancellationToken))
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("put", TMessageType.Call, SeqId), cancellationToken);

                var args = new putArgs();
                args.Table = table;
                args.Tput = tput;

                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);

                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new putResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                return;
            }

            public async Task<bool> checkAndPutAsync(byte[] table, byte[] row, byte[] family, byte[] qualifier, byte[] @value, TPut tput, CancellationToken cancellationToken = default(CancellationToken))
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("checkAndPut", TMessageType.Call, SeqId), cancellationToken);

                var args = new checkAndPutArgs();
                args.Table = table;
                args.Row = row;
                args.Family = family;
                args.Qualifier = qualifier;
                args.Value = @value;
                args.Tput = tput;

                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);

                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new checkAndPutResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "checkAndPut failed: unknown result");
            }

            public async Task putMultipleAsync(byte[] table, List<TPut> tputs, CancellationToken cancellationToken = default(CancellationToken))
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("putMultiple", TMessageType.Call, SeqId), cancellationToken);

                var args = new putMultipleArgs();
                args.Table = table;
                args.Tputs = tputs;

                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);

                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new putMultipleResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                return;
            }

            public async Task deleteSingleAsync(byte[] table, TDelete tdelete, CancellationToken cancellationToken = default(CancellationToken))
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteSingle", TMessageType.Call, SeqId), cancellationToken);

                var args = new deleteSingleArgs();
                args.Table = table;
                args.Tdelete = tdelete;

                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);

                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new deleteSingleResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                return;
            }

            public async Task<List<TDelete>> deleteMultipleAsync(byte[] table, List<TDelete> tdeletes, CancellationToken cancellationToken = default(CancellationToken))
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteMultiple", TMessageType.Call, SeqId), cancellationToken);

                var args = new deleteMultipleArgs();
                args.Table = table;
                args.Tdeletes = tdeletes;

                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);

                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new deleteMultipleResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteMultiple failed: unknown result");
            }

            public async Task<bool> checkAndDeleteAsync(byte[] table, byte[] row, byte[] family, byte[] qualifier, byte[] @value, TDelete tdelete, CancellationToken cancellationToken = default(CancellationToken))
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("checkAndDelete", TMessageType.Call, SeqId), cancellationToken);

                var args = new checkAndDeleteArgs();
                args.Table = table;
                args.Row = row;
                args.Family = family;
                args.Qualifier = qualifier;
                args.Value = @value;
                args.Tdelete = tdelete;

                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);

                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new checkAndDeleteResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "checkAndDelete failed: unknown result");
            }

            public async Task<TResult> incrementAsync(byte[] table, TIncrement tincrement, CancellationToken cancellationToken = default(CancellationToken))
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("increment", TMessageType.Call, SeqId), cancellationToken);

                var args = new incrementArgs();
                args.Table = table;
                args.Tincrement = tincrement;

                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);

                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new incrementResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "increment failed: unknown result");
            }

            public async Task<TResult> appendAsync(byte[] table, TAppend tappend, CancellationToken cancellationToken = default(CancellationToken))
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("append", TMessageType.Call, SeqId), cancellationToken);

                var args = new appendArgs();
                args.Table = table;
                args.Tappend = tappend;

                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);

                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new appendResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "append failed: unknown result");
            }

            public async Task<int> openScannerAsync(byte[] table, TScan tscan, CancellationToken cancellationToken = default(CancellationToken))
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("openScanner", TMessageType.Call, SeqId), cancellationToken);

                var args = new openScannerArgs();
                args.Table = table;
                args.Tscan = tscan;

                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);

                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new openScannerResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "openScanner failed: unknown result");
            }

            public async Task<List<TResult>> getScannerRowsAsync(int scannerId, int numRows, CancellationToken cancellationToken = default(CancellationToken))
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("getScannerRows", TMessageType.Call, SeqId), cancellationToken);

                var args = new getScannerRowsArgs();
                args.ScannerId = scannerId;
                args.NumRows = numRows;

                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);

                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new getScannerRowsResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                if (result.__isset.ia)
                {
                    throw result.Ia;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getScannerRows failed: unknown result");
            }

            public async Task closeScannerAsync(int scannerId, CancellationToken cancellationToken = default(CancellationToken))
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("closeScanner", TMessageType.Call, SeqId), cancellationToken);

                var args = new closeScannerArgs();
                args.ScannerId = scannerId;

                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);

                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new closeScannerResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                if (result.__isset.ia)
                {
                    throw result.Ia;
                }
                return;
            }

            public async Task mutateRowAsync(byte[] table, TRowMutations trowMutations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("mutateRow", TMessageType.Call, SeqId), cancellationToken);

                var args = new mutateRowArgs();
                args.Table = table;
                args.TrowMutations = trowMutations;

                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);

                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new mutateRowResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                return;
            }

            public async Task<List<TResult>> getScannerResultsAsync(byte[] table, TScan tscan, int numRows, CancellationToken cancellationToken = default(CancellationToken))
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("getScannerResults", TMessageType.Call, SeqId), cancellationToken);

                var args = new getScannerResultsArgs();
                args.Table = table;
                args.Tscan = tscan;
                args.NumRows = numRows;

                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);

                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new getScannerResultsResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getScannerResults failed: unknown result");
            }

            public async Task<THRegionLocation> getRegionLocationAsync(byte[] table, byte[] row, bool reload, CancellationToken cancellationToken = default(CancellationToken))
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("getRegionLocation", TMessageType.Call, SeqId), cancellationToken);

                var args = new getRegionLocationArgs();
                args.Table = table;
                args.Row = row;
                args.Reload = reload;

                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);

                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new getRegionLocationResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRegionLocation failed: unknown result");
            }

            public async Task<List<THRegionLocation>> getAllRegionLocationsAsync(byte[] table, CancellationToken cancellationToken = default(CancellationToken))
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("getAllRegionLocations", TMessageType.Call, SeqId), cancellationToken);

                var args = new getAllRegionLocationsArgs();
                args.Table = table;

                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);

                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new getAllRegionLocationsResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAllRegionLocations failed: unknown result");
            }

            public async Task<bool> checkAndMutateAsync(byte[] table, byte[] row, byte[] family, byte[] qualifier, TCompareOp compareOp, byte[] @value, TRowMutations rowMutations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("checkAndMutate", TMessageType.Call, SeqId), cancellationToken);

                var args = new checkAndMutateArgs();
                args.Table = table;
                args.Row = row;
                args.Family = family;
                args.Qualifier = qualifier;
                args.CompareOp = compareOp;
                args.Value = @value;
                args.RowMutations = rowMutations;

                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);

                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new checkAndMutateResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "checkAndMutate failed: unknown result");
            }

        }

        public class AsyncProcessor : ITAsyncProcessor
        {
            private IAsync _iAsync;

            public AsyncProcessor(IAsync iAsync)
            {
                if (iAsync == null) throw new ArgumentNullException(nameof(iAsync));

                _iAsync = iAsync;
                processMap_["exists"] = exists_ProcessAsync;
                processMap_["existsAll"] = existsAll_ProcessAsync;
                processMap_["get"] = get_ProcessAsync;
                processMap_["getMultiple"] = getMultiple_ProcessAsync;
                processMap_["put"] = put_ProcessAsync;
                processMap_["checkAndPut"] = checkAndPut_ProcessAsync;
                processMap_["putMultiple"] = putMultiple_ProcessAsync;
                processMap_["deleteSingle"] = deleteSingle_ProcessAsync;
                processMap_["deleteMultiple"] = deleteMultiple_ProcessAsync;
                processMap_["checkAndDelete"] = checkAndDelete_ProcessAsync;
                processMap_["increment"] = increment_ProcessAsync;
                processMap_["append"] = append_ProcessAsync;
                processMap_["openScanner"] = openScanner_ProcessAsync;
                processMap_["getScannerRows"] = getScannerRows_ProcessAsync;
                processMap_["closeScanner"] = closeScanner_ProcessAsync;
                processMap_["mutateRow"] = mutateRow_ProcessAsync;
                processMap_["getScannerResults"] = getScannerResults_ProcessAsync;
                processMap_["getRegionLocation"] = getRegionLocation_ProcessAsync;
                processMap_["getAllRegionLocations"] = getAllRegionLocations_ProcessAsync;
                processMap_["checkAndMutate"] = checkAndMutate_ProcessAsync;
            }

            protected delegate Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
            protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

            public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
            {
                return await ProcessAsync(iprot, oprot, CancellationToken.None);
            }

            public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                try
                {
                    var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

                    ProcessFunction fn;
                    processMap_.TryGetValue(msg.Name, out fn);

                    if (fn == null)
                    {
                        await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
                        await iprot.ReadMessageEndAsync(cancellationToken);
                        var x = new TApplicationException(TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
                        await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
                        await x.WriteAsync(oprot, cancellationToken);
                        await oprot.WriteMessageEndAsync(cancellationToken);
                        await oprot.Transport.FlushAsync(cancellationToken);
                        return true;
                    }

                    await fn(msg.SeqID, iprot, oprot, cancellationToken);

                }
                catch (IOException)
                {
                    return false;
                }

                return true;
            }

            public async Task exists_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new existsArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new existsResult();
                try
                {
                    try
                    {
                        result.Success = await _iAsync.existsAsync(args.Table, args.Tget, cancellationToken);
                    }
                    catch (TIOError io)
                    {
                        result.Io = io;
                    }
                    await oprot.WriteMessageBeginAsync(new TMessage("exists", TMessageType.Reply, seqid), cancellationToken);
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("exists", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task existsAll_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new existsAllArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new existsAllResult();
                try
                {
                    try
                    {
                        result.Success = await _iAsync.existsAllAsync(args.Table, args.Tgets, cancellationToken);
                    }
                    catch (TIOError io)
                    {
                        result.Io = io;
                    }
                    await oprot.WriteMessageBeginAsync(new TMessage("existsAll", TMessageType.Reply, seqid), cancellationToken);
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("existsAll", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task get_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new getArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new getResult();
                try
                {
                    try
                    {
                        result.Success = await _iAsync.@getAsync(args.Table, args.Tget, cancellationToken);
                    }
                    catch (TIOError io)
                    {
                        result.Io = io;
                    }
                    await oprot.WriteMessageBeginAsync(new TMessage("get", TMessageType.Reply, seqid), cancellationToken);
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("get", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task getMultiple_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new getMultipleArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new getMultipleResult();
                try
                {
                    try
                    {
                        result.Success = await _iAsync.getMultipleAsync(args.Table, args.Tgets, cancellationToken);
                    }
                    catch (TIOError io)
                    {
                        result.Io = io;
                    }
                    await oprot.WriteMessageBeginAsync(new TMessage("getMultiple", TMessageType.Reply, seqid), cancellationToken);
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("getMultiple", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task put_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new putArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new putResult();
                try
                {
                    try
                    {
                        await _iAsync.putAsync(args.Table, args.Tput, cancellationToken);
                    }
                    catch (TIOError io)
                    {
                        result.Io = io;
                    }
                    await oprot.WriteMessageBeginAsync(new TMessage("put", TMessageType.Reply, seqid), cancellationToken);
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("put", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task checkAndPut_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new checkAndPutArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new checkAndPutResult();
                try
                {
                    try
                    {
                        result.Success = await _iAsync.checkAndPutAsync(args.Table, args.Row, args.Family, args.Qualifier, args.Value, args.Tput, cancellationToken);
                    }
                    catch (TIOError io)
                    {
                        result.Io = io;
                    }
                    await oprot.WriteMessageBeginAsync(new TMessage("checkAndPut", TMessageType.Reply, seqid), cancellationToken);
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("checkAndPut", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task putMultiple_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new putMultipleArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new putMultipleResult();
                try
                {
                    try
                    {
                        await _iAsync.putMultipleAsync(args.Table, args.Tputs, cancellationToken);
                    }
                    catch (TIOError io)
                    {
                        result.Io = io;
                    }
                    await oprot.WriteMessageBeginAsync(new TMessage("putMultiple", TMessageType.Reply, seqid), cancellationToken);
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("putMultiple", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task deleteSingle_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new deleteSingleArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new deleteSingleResult();
                try
                {
                    try
                    {
                        await _iAsync.deleteSingleAsync(args.Table, args.Tdelete, cancellationToken);
                    }
                    catch (TIOError io)
                    {
                        result.Io = io;
                    }
                    await oprot.WriteMessageBeginAsync(new TMessage("deleteSingle", TMessageType.Reply, seqid), cancellationToken);
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("deleteSingle", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task deleteMultiple_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new deleteMultipleArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new deleteMultipleResult();
                try
                {
                    try
                    {
                        result.Success = await _iAsync.deleteMultipleAsync(args.Table, args.Tdeletes, cancellationToken);
                    }
                    catch (TIOError io)
                    {
                        result.Io = io;
                    }
                    await oprot.WriteMessageBeginAsync(new TMessage("deleteMultiple", TMessageType.Reply, seqid), cancellationToken);
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("deleteMultiple", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task checkAndDelete_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new checkAndDeleteArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new checkAndDeleteResult();
                try
                {
                    try
                    {
                        result.Success = await _iAsync.checkAndDeleteAsync(args.Table, args.Row, args.Family, args.Qualifier, args.Value, args.Tdelete, cancellationToken);
                    }
                    catch (TIOError io)
                    {
                        result.Io = io;
                    }
                    await oprot.WriteMessageBeginAsync(new TMessage("checkAndDelete", TMessageType.Reply, seqid), cancellationToken);
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("checkAndDelete", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task increment_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new incrementArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new incrementResult();
                try
                {
                    try
                    {
                        result.Success = await _iAsync.incrementAsync(args.Table, args.Tincrement, cancellationToken);
                    }
                    catch (TIOError io)
                    {
                        result.Io = io;
                    }
                    await oprot.WriteMessageBeginAsync(new TMessage("increment", TMessageType.Reply, seqid), cancellationToken);
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("increment", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task append_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new appendArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new appendResult();
                try
                {
                    try
                    {
                        result.Success = await _iAsync.appendAsync(args.Table, args.Tappend, cancellationToken);
                    }
                    catch (TIOError io)
                    {
                        result.Io = io;
                    }
                    await oprot.WriteMessageBeginAsync(new TMessage("append", TMessageType.Reply, seqid), cancellationToken);
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("append", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task openScanner_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new openScannerArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new openScannerResult();
                try
                {
                    try
                    {
                        result.Success = await _iAsync.openScannerAsync(args.Table, args.Tscan, cancellationToken);
                    }
                    catch (TIOError io)
                    {
                        result.Io = io;
                    }
                    await oprot.WriteMessageBeginAsync(new TMessage("openScanner", TMessageType.Reply, seqid), cancellationToken);
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("openScanner", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task getScannerRows_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new getScannerRowsArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new getScannerRowsResult();
                try
                {
                    try
                    {
                        result.Success = await _iAsync.getScannerRowsAsync(args.ScannerId, args.NumRows, cancellationToken);
                    }
                    catch (TIOError io)
                    {
                        result.Io = io;
                    }
                    catch (TIllegalArgument ia)
                    {
                        result.Ia = ia;
                    }
                    await oprot.WriteMessageBeginAsync(new TMessage("getScannerRows", TMessageType.Reply, seqid), cancellationToken);
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("getScannerRows", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task closeScanner_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new closeScannerArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new closeScannerResult();
                try
                {
                    try
                    {
                        await _iAsync.closeScannerAsync(args.ScannerId, cancellationToken);
                    }
                    catch (TIOError io)
                    {
                        result.Io = io;
                    }
                    catch (TIllegalArgument ia)
                    {
                        result.Ia = ia;
                    }
                    await oprot.WriteMessageBeginAsync(new TMessage("closeScanner", TMessageType.Reply, seqid), cancellationToken);
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("closeScanner", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task mutateRow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new mutateRowArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new mutateRowResult();
                try
                {
                    try
                    {
                        await _iAsync.mutateRowAsync(args.Table, args.TrowMutations, cancellationToken);
                    }
                    catch (TIOError io)
                    {
                        result.Io = io;
                    }
                    await oprot.WriteMessageBeginAsync(new TMessage("mutateRow", TMessageType.Reply, seqid), cancellationToken);
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("mutateRow", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task getScannerResults_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new getScannerResultsArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new getScannerResultsResult();
                try
                {
                    try
                    {
                        result.Success = await _iAsync.getScannerResultsAsync(args.Table, args.Tscan, args.NumRows, cancellationToken);
                    }
                    catch (TIOError io)
                    {
                        result.Io = io;
                    }
                    await oprot.WriteMessageBeginAsync(new TMessage("getScannerResults", TMessageType.Reply, seqid), cancellationToken);
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("getScannerResults", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task getRegionLocation_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new getRegionLocationArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new getRegionLocationResult();
                try
                {
                    try
                    {
                        result.Success = await _iAsync.getRegionLocationAsync(args.Table, args.Row, args.Reload, cancellationToken);
                    }
                    catch (TIOError io)
                    {
                        result.Io = io;
                    }
                    await oprot.WriteMessageBeginAsync(new TMessage("getRegionLocation", TMessageType.Reply, seqid), cancellationToken);
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("getRegionLocation", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task getAllRegionLocations_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new getAllRegionLocationsArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new getAllRegionLocationsResult();
                try
                {
                    try
                    {
                        result.Success = await _iAsync.getAllRegionLocationsAsync(args.Table, cancellationToken);
                    }
                    catch (TIOError io)
                    {
                        result.Io = io;
                    }
                    await oprot.WriteMessageBeginAsync(new TMessage("getAllRegionLocations", TMessageType.Reply, seqid), cancellationToken);
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("getAllRegionLocations", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task checkAndMutate_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new checkAndMutateArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new checkAndMutateResult();
                try
                {
                    try
                    {
                        result.Success = await _iAsync.checkAndMutateAsync(args.Table, args.Row, args.Family, args.Qualifier, args.CompareOp, args.Value, args.RowMutations, cancellationToken);
                    }
                    catch (TIOError io)
                    {
                        result.Io = io;
                    }
                    await oprot.WriteMessageBeginAsync(new TMessage("checkAndMutate", TMessageType.Reply, seqid), cancellationToken);
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("checkAndMutate", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

        }


        public partial class existsArgs : TBase
        {

            /// <summary>
            /// the table to check on
            /// </summary>
            public byte[] Table { get; set; }

            /// <summary>
            /// the TGet to check for
            /// </summary>
            public TGet Tget { get; set; }

            public existsArgs()
            {
            }

            public existsArgs(byte[] table, TGet tget) : this()
            {
                this.Table = table;
                this.Tget = tget;
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    bool isset_table = false;
                    bool isset_tget = false;
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.String)
                                {
                                    Table = await iprot.ReadBinaryAsync(cancellationToken);
                                    isset_table = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.Struct)
                                {
                                    Tget = new TGet();
                                    await Tget.ReadAsync(iprot, cancellationToken);
                                    isset_tget = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                    if (!isset_table)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                    if (!isset_tget)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("exists_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    field.Name = "table";
                    field.Type = TType.String;
                    field.ID = 1;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBinaryAsync(Table, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    field.Name = "tget";
                    field.Type = TType.Struct;
                    field.ID = 2;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await Tget.WriteAsync(oprot, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as existsArgs;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return TCollections.Equals(Table, other.Table)
                  && System.Object.Equals(Tget, other.Tget);
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    hashcode = (hashcode * 397) + Table.GetHashCode();
                    hashcode = (hashcode * 397) + Tget.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("exists_args(");
                sb.Append(", Table: ");
                sb.Append(Table);
                sb.Append(", Tget: ");
                sb.Append(Tget == null ? "<null>" : Tget.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class existsResult : TBase
        {
            private bool _success;
            private TIOError _io;

            public bool Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public TIOError Io
            {
                get
                {
                    return _io;
                }
                set
                {
                    __isset.io = true;
                    this._io = value;
                }
            }


            public Isset __isset;
            public struct Isset
            {
                public bool success;
                public bool io;
            }

            public existsResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.Bool)
                                {
                                    Success = await iprot.ReadBoolAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    Io = new TIOError();
                                    await Io.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("exists_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if (this.__isset.success)
                    {
                        field.Name = "Success";
                        field.Type = TType.Bool;
                        field.ID = 0;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteBoolAsync(Success, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    else if (this.__isset.io)
                    {
                        if (Io != null)
                        {
                            field.Name = "Io";
                            field.Type = TType.Struct;
                            field.ID = 1;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Io.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as existsResult;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
                  && ((__isset.io == other.__isset.io) && ((!__isset.io) || (System.Object.Equals(Io, other.Io))));
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    if (__isset.success)
                        hashcode = (hashcode * 397) + Success.GetHashCode();
                    if (__isset.io)
                        hashcode = (hashcode * 397) + Io.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("exists_result(");
                bool __first = true;
                if (__isset.success)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success);
                }
                if (Io != null && __isset.io)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Io: ");
                    sb.Append(Io == null ? "<null>" : Io.ToString());
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class existsAllArgs : TBase
        {

            /// <summary>
            /// the table to check on
            /// </summary>
            public byte[] Table { get; set; }

            /// <summary>
            /// a list of TGets to check for
            /// </summary>
            public List<TGet> Tgets { get; set; }

            public existsAllArgs()
            {
            }

            public existsAllArgs(byte[] table, List<TGet> tgets) : this()
            {
                this.Table = table;
                this.Tgets = tgets;
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    bool isset_table = false;
                    bool isset_tgets = false;
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.String)
                                {
                                    Table = await iprot.ReadBinaryAsync(cancellationToken);
                                    isset_table = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.List)
                                {
                                    {
                                        TList _list71 = await iprot.ReadListBeginAsync(cancellationToken);
                                        Tgets = new List<TGet>(_list71.Count);
                                        for (int _i72 = 0; _i72 < _list71.Count; ++_i72)
                                        {
                                            TGet _elem73;
                                            _elem73 = new TGet();
                                            await _elem73.ReadAsync(iprot, cancellationToken);
                                            Tgets.Add(_elem73);
                                        }
                                        await iprot.ReadListEndAsync(cancellationToken);
                                    }
                                    isset_tgets = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                    if (!isset_table)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                    if (!isset_tgets)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("existsAll_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    field.Name = "table";
                    field.Type = TType.String;
                    field.ID = 1;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBinaryAsync(Table, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    field.Name = "tgets";
                    field.Type = TType.List;
                    field.ID = 2;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    {
                        await oprot.WriteListBeginAsync(new TList(TType.Struct, Tgets.Count), cancellationToken);
                        foreach (TGet _iter74 in Tgets)
                        {
                            await _iter74.WriteAsync(oprot, cancellationToken);
                        }
                        await oprot.WriteListEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as existsAllArgs;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return TCollections.Equals(Table, other.Table)
                  && TCollections.Equals(Tgets, other.Tgets);
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    hashcode = (hashcode * 397) + Table.GetHashCode();
                    hashcode = (hashcode * 397) + TCollections.GetHashCode(Tgets);
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("existsAll_args(");
                sb.Append(", Table: ");
                sb.Append(Table);
                sb.Append(", Tgets: ");
                sb.Append(Tgets);
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class existsAllResult : TBase
        {
            private List<bool> _success;
            private TIOError _io;

            public List<bool> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public TIOError Io
            {
                get
                {
                    return _io;
                }
                set
                {
                    __isset.io = true;
                    this._io = value;
                }
            }


            public Isset __isset;
            public struct Isset
            {
                public bool success;
                public bool io;
            }

            public existsAllResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.List)
                                {
                                    {
                                        TList _list75 = await iprot.ReadListBeginAsync(cancellationToken);
                                        Success = new List<bool>(_list75.Count);
                                        for (int _i76 = 0; _i76 < _list75.Count; ++_i76)
                                        {
                                            bool _elem77;
                                            _elem77 = await iprot.ReadBoolAsync(cancellationToken);
                                            Success.Add(_elem77);
                                        }
                                        await iprot.ReadListEndAsync(cancellationToken);
                                    }
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    Io = new TIOError();
                                    await Io.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("existsAll_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if (this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.List;
                            field.ID = 0;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            {
                                await oprot.WriteListBeginAsync(new TList(TType.Bool, Success.Count), cancellationToken);
                                foreach (bool _iter78 in Success)
                                {
                                    await oprot.WriteBoolAsync(_iter78, cancellationToken);
                                }
                                await oprot.WriteListEndAsync(cancellationToken);
                            }
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    else if (this.__isset.io)
                    {
                        if (Io != null)
                        {
                            field.Name = "Io";
                            field.Type = TType.Struct;
                            field.ID = 1;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Io.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as existsAllResult;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
                  && ((__isset.io == other.__isset.io) && ((!__isset.io) || (System.Object.Equals(Io, other.Io))));
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    if (__isset.success)
                        hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
                    if (__isset.io)
                        hashcode = (hashcode * 397) + Io.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("existsAll_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success);
                }
                if (Io != null && __isset.io)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Io: ");
                    sb.Append(Io == null ? "<null>" : Io.ToString());
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class getArgs : TBase
        {

            /// <summary>
            /// the table to get from
            /// </summary>
            public byte[] Table { get; set; }

            /// <summary>
            /// the TGet to fetch
            /// </summary>
            public TGet Tget { get; set; }

            public getArgs()
            {
            }

            public getArgs(byte[] table, TGet tget) : this()
            {
                this.Table = table;
                this.Tget = tget;
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    bool isset_table = false;
                    bool isset_tget = false;
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.String)
                                {
                                    Table = await iprot.ReadBinaryAsync(cancellationToken);
                                    isset_table = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.Struct)
                                {
                                    Tget = new TGet();
                                    await Tget.ReadAsync(iprot, cancellationToken);
                                    isset_tget = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                    if (!isset_table)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                    if (!isset_tget)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("get_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    field.Name = "table";
                    field.Type = TType.String;
                    field.ID = 1;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBinaryAsync(Table, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    field.Name = "tget";
                    field.Type = TType.Struct;
                    field.ID = 2;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await Tget.WriteAsync(oprot, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as getArgs;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return TCollections.Equals(Table, other.Table)
                  && System.Object.Equals(Tget, other.Tget);
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    hashcode = (hashcode * 397) + Table.GetHashCode();
                    hashcode = (hashcode * 397) + Tget.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("get_args(");
                sb.Append(", Table: ");
                sb.Append(Table);
                sb.Append(", Tget: ");
                sb.Append(Tget == null ? "<null>" : Tget.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class getResult : TBase
        {
            private TResult _success;
            private TIOError _io;

            public TResult Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public TIOError Io
            {
                get
                {
                    return _io;
                }
                set
                {
                    __isset.io = true;
                    this._io = value;
                }
            }


            public Isset __isset;
            public struct Isset
            {
                public bool success;
                public bool io;
            }

            public getResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.Struct)
                                {
                                    Success = new TResult();
                                    await Success.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    Io = new TIOError();
                                    await Io.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("get_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if (this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.Struct;
                            field.ID = 0;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Success.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    else if (this.__isset.io)
                    {
                        if (Io != null)
                        {
                            field.Name = "Io";
                            field.Type = TType.Struct;
                            field.ID = 1;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Io.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as getResult;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
                  && ((__isset.io == other.__isset.io) && ((!__isset.io) || (System.Object.Equals(Io, other.Io))));
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    if (__isset.success)
                        hashcode = (hashcode * 397) + Success.GetHashCode();
                    if (__isset.io)
                        hashcode = (hashcode * 397) + Io.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("get_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success == null ? "<null>" : Success.ToString());
                }
                if (Io != null && __isset.io)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Io: ");
                    sb.Append(Io == null ? "<null>" : Io.ToString());
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class getMultipleArgs : TBase
        {

            /// <summary>
            /// the table to get from
            /// </summary>
            public byte[] Table { get; set; }

            /// <summary>
            /// a list of TGets to fetch, the Result list
            /// will have the Results at corresponding positions
            /// or null if there was an error
            /// </summary>
            public List<TGet> Tgets { get; set; }

            public getMultipleArgs()
            {
            }

            public getMultipleArgs(byte[] table, List<TGet> tgets) : this()
            {
                this.Table = table;
                this.Tgets = tgets;
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    bool isset_table = false;
                    bool isset_tgets = false;
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.String)
                                {
                                    Table = await iprot.ReadBinaryAsync(cancellationToken);
                                    isset_table = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.List)
                                {
                                    {
                                        TList _list79 = await iprot.ReadListBeginAsync(cancellationToken);
                                        Tgets = new List<TGet>(_list79.Count);
                                        for (int _i80 = 0; _i80 < _list79.Count; ++_i80)
                                        {
                                            TGet _elem81;
                                            _elem81 = new TGet();
                                            await _elem81.ReadAsync(iprot, cancellationToken);
                                            Tgets.Add(_elem81);
                                        }
                                        await iprot.ReadListEndAsync(cancellationToken);
                                    }
                                    isset_tgets = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                    if (!isset_table)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                    if (!isset_tgets)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("getMultiple_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    field.Name = "table";
                    field.Type = TType.String;
                    field.ID = 1;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBinaryAsync(Table, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    field.Name = "tgets";
                    field.Type = TType.List;
                    field.ID = 2;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    {
                        await oprot.WriteListBeginAsync(new TList(TType.Struct, Tgets.Count), cancellationToken);
                        foreach (TGet _iter82 in Tgets)
                        {
                            await _iter82.WriteAsync(oprot, cancellationToken);
                        }
                        await oprot.WriteListEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as getMultipleArgs;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return TCollections.Equals(Table, other.Table)
                  && TCollections.Equals(Tgets, other.Tgets);
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    hashcode = (hashcode * 397) + Table.GetHashCode();
                    hashcode = (hashcode * 397) + TCollections.GetHashCode(Tgets);
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("getMultiple_args(");
                sb.Append(", Table: ");
                sb.Append(Table);
                sb.Append(", Tgets: ");
                sb.Append(Tgets);
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class getMultipleResult : TBase
        {
            private List<TResult> _success;
            private TIOError _io;

            public List<TResult> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public TIOError Io
            {
                get
                {
                    return _io;
                }
                set
                {
                    __isset.io = true;
                    this._io = value;
                }
            }


            public Isset __isset;
            public struct Isset
            {
                public bool success;
                public bool io;
            }

            public getMultipleResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.List)
                                {
                                    {
                                        TList _list83 = await iprot.ReadListBeginAsync(cancellationToken);
                                        Success = new List<TResult>(_list83.Count);
                                        for (int _i84 = 0; _i84 < _list83.Count; ++_i84)
                                        {
                                            TResult _elem85;
                                            _elem85 = new TResult();
                                            await _elem85.ReadAsync(iprot, cancellationToken);
                                            Success.Add(_elem85);
                                        }
                                        await iprot.ReadListEndAsync(cancellationToken);
                                    }
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    Io = new TIOError();
                                    await Io.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("getMultiple_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if (this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.List;
                            field.ID = 0;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            {
                                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                                foreach (TResult _iter86 in Success)
                                {
                                    await _iter86.WriteAsync(oprot, cancellationToken);
                                }
                                await oprot.WriteListEndAsync(cancellationToken);
                            }
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    else if (this.__isset.io)
                    {
                        if (Io != null)
                        {
                            field.Name = "Io";
                            field.Type = TType.Struct;
                            field.ID = 1;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Io.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as getMultipleResult;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
                  && ((__isset.io == other.__isset.io) && ((!__isset.io) || (System.Object.Equals(Io, other.Io))));
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    if (__isset.success)
                        hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
                    if (__isset.io)
                        hashcode = (hashcode * 397) + Io.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("getMultiple_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success);
                }
                if (Io != null && __isset.io)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Io: ");
                    sb.Append(Io == null ? "<null>" : Io.ToString());
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class putArgs : TBase
        {

            /// <summary>
            /// the table to put data in
            /// </summary>
            public byte[] Table { get; set; }

            /// <summary>
            /// the TPut to put
            /// </summary>
            public TPut Tput { get; set; }

            public putArgs()
            {
            }

            public putArgs(byte[] table, TPut tput) : this()
            {
                this.Table = table;
                this.Tput = tput;
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    bool isset_table = false;
                    bool isset_tput = false;
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.String)
                                {
                                    Table = await iprot.ReadBinaryAsync(cancellationToken);
                                    isset_table = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.Struct)
                                {
                                    Tput = new TPut();
                                    await Tput.ReadAsync(iprot, cancellationToken);
                                    isset_tput = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                    if (!isset_table)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                    if (!isset_tput)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("put_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    field.Name = "table";
                    field.Type = TType.String;
                    field.ID = 1;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBinaryAsync(Table, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    field.Name = "tput";
                    field.Type = TType.Struct;
                    field.ID = 2;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await Tput.WriteAsync(oprot, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as putArgs;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return TCollections.Equals(Table, other.Table)
                  && System.Object.Equals(Tput, other.Tput);
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    hashcode = (hashcode * 397) + Table.GetHashCode();
                    hashcode = (hashcode * 397) + Tput.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("put_args(");
                sb.Append(", Table: ");
                sb.Append(Table);
                sb.Append(", Tput: ");
                sb.Append(Tput == null ? "<null>" : Tput.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class putResult : TBase
        {
            private TIOError _io;

            public TIOError Io
            {
                get
                {
                    return _io;
                }
                set
                {
                    __isset.io = true;
                    this._io = value;
                }
            }


            public Isset __isset;
            public struct Isset
            {
                public bool io;
            }

            public putResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    Io = new TIOError();
                                    await Io.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("put_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if (this.__isset.io)
                    {
                        if (Io != null)
                        {
                            field.Name = "Io";
                            field.Type = TType.Struct;
                            field.ID = 1;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Io.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as putResult;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return ((__isset.io == other.__isset.io) && ((!__isset.io) || (System.Object.Equals(Io, other.Io))));
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    if (__isset.io)
                        hashcode = (hashcode * 397) + Io.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("put_result(");
                bool __first = true;
                if (Io != null && __isset.io)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Io: ");
                    sb.Append(Io == null ? "<null>" : Io.ToString());
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class checkAndPutArgs : TBase
        {
            private byte[] _value;

            /// <summary>
            /// to check in and put to
            /// </summary>
            public byte[] Table { get; set; }

            /// <summary>
            /// row to check
            /// </summary>
            public byte[] Row { get; set; }

            /// <summary>
            /// column family to check
            /// </summary>
            public byte[] Family { get; set; }

            /// <summary>
            /// column qualifier to check
            /// </summary>
            public byte[] Qualifier { get; set; }

            /// <summary>
            /// the expected value, if not provided the
            /// check is for the non-existence of the
            /// column in question
            /// </summary>
            public byte[] Value
            {
                get
                {
                    return _value;
                }
                set
                {
                    __isset.@value = true;
                    this._value = value;
                }
            }

            /// <summary>
            /// the TPut to put if the check succeeds
            /// </summary>
            public TPut Tput { get; set; }


            public Isset __isset;
            public struct Isset
            {
                public bool @value;
            }

            public checkAndPutArgs()
            {
            }

            public checkAndPutArgs(byte[] table, byte[] row, byte[] family, byte[] qualifier, TPut tput) : this()
            {
                this.Table = table;
                this.Row = row;
                this.Family = family;
                this.Qualifier = qualifier;
                this.Tput = tput;
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    bool isset_table = false;
                    bool isset_row = false;
                    bool isset_family = false;
                    bool isset_qualifier = false;
                    bool isset_tput = false;
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.String)
                                {
                                    Table = await iprot.ReadBinaryAsync(cancellationToken);
                                    isset_table = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.String)
                                {
                                    Row = await iprot.ReadBinaryAsync(cancellationToken);
                                    isset_row = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 3:
                                if (field.Type == TType.String)
                                {
                                    Family = await iprot.ReadBinaryAsync(cancellationToken);
                                    isset_family = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 4:
                                if (field.Type == TType.String)
                                {
                                    Qualifier = await iprot.ReadBinaryAsync(cancellationToken);
                                    isset_qualifier = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 5:
                                if (field.Type == TType.String)
                                {
                                    Value = await iprot.ReadBinaryAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 6:
                                if (field.Type == TType.Struct)
                                {
                                    Tput = new TPut();
                                    await Tput.ReadAsync(iprot, cancellationToken);
                                    isset_tput = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                    if (!isset_table)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                    if (!isset_row)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                    if (!isset_family)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                    if (!isset_qualifier)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                    if (!isset_tput)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("checkAndPut_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    field.Name = "table";
                    field.Type = TType.String;
                    field.ID = 1;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBinaryAsync(Table, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    field.Name = "row";
                    field.Type = TType.String;
                    field.ID = 2;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBinaryAsync(Row, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    field.Name = "family";
                    field.Type = TType.String;
                    field.ID = 3;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBinaryAsync(Family, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    field.Name = "qualifier";
                    field.Type = TType.String;
                    field.ID = 4;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBinaryAsync(Qualifier, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    if (Value != null && __isset.@value)
                    {
                        field.Name = "value";
                        field.Type = TType.String;
                        field.ID = 5;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteBinaryAsync(Value, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    field.Name = "tput";
                    field.Type = TType.Struct;
                    field.ID = 6;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await Tput.WriteAsync(oprot, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as checkAndPutArgs;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return TCollections.Equals(Table, other.Table)
                  && TCollections.Equals(Row, other.Row)
                  && TCollections.Equals(Family, other.Family)
                  && TCollections.Equals(Qualifier, other.Qualifier)
                  && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (TCollections.Equals(Value, other.Value))))
                  && System.Object.Equals(Tput, other.Tput);
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    hashcode = (hashcode * 397) + Table.GetHashCode();
                    hashcode = (hashcode * 397) + Row.GetHashCode();
                    hashcode = (hashcode * 397) + Family.GetHashCode();
                    hashcode = (hashcode * 397) + Qualifier.GetHashCode();
                    if (__isset.@value)
                        hashcode = (hashcode * 397) + Value.GetHashCode();
                    hashcode = (hashcode * 397) + Tput.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("checkAndPut_args(");
                sb.Append(", Table: ");
                sb.Append(Table);
                sb.Append(", Row: ");
                sb.Append(Row);
                sb.Append(", Family: ");
                sb.Append(Family);
                sb.Append(", Qualifier: ");
                sb.Append(Qualifier);
                if (Value != null && __isset.@value)
                {
                    sb.Append(", Value: ");
                    sb.Append(Value);
                }
                sb.Append(", Tput: ");
                sb.Append(Tput == null ? "<null>" : Tput.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class checkAndPutResult : TBase
        {
            private bool _success;
            private TIOError _io;

            public bool Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public TIOError Io
            {
                get
                {
                    return _io;
                }
                set
                {
                    __isset.io = true;
                    this._io = value;
                }
            }


            public Isset __isset;
            public struct Isset
            {
                public bool success;
                public bool io;
            }

            public checkAndPutResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.Bool)
                                {
                                    Success = await iprot.ReadBoolAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    Io = new TIOError();
                                    await Io.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("checkAndPut_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if (this.__isset.success)
                    {
                        field.Name = "Success";
                        field.Type = TType.Bool;
                        field.ID = 0;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteBoolAsync(Success, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    else if (this.__isset.io)
                    {
                        if (Io != null)
                        {
                            field.Name = "Io";
                            field.Type = TType.Struct;
                            field.ID = 1;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Io.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as checkAndPutResult;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
                  && ((__isset.io == other.__isset.io) && ((!__isset.io) || (System.Object.Equals(Io, other.Io))));
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    if (__isset.success)
                        hashcode = (hashcode * 397) + Success.GetHashCode();
                    if (__isset.io)
                        hashcode = (hashcode * 397) + Io.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("checkAndPut_result(");
                bool __first = true;
                if (__isset.success)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success);
                }
                if (Io != null && __isset.io)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Io: ");
                    sb.Append(Io == null ? "<null>" : Io.ToString());
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class putMultipleArgs : TBase
        {

            /// <summary>
            /// the table to put data in
            /// </summary>
            public byte[] Table { get; set; }

            /// <summary>
            /// a list of TPuts to commit
            /// </summary>
            public List<TPut> Tputs { get; set; }

            public putMultipleArgs()
            {
            }

            public putMultipleArgs(byte[] table, List<TPut> tputs) : this()
            {
                this.Table = table;
                this.Tputs = tputs;
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    bool isset_table = false;
                    bool isset_tputs = false;
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.String)
                                {
                                    Table = await iprot.ReadBinaryAsync(cancellationToken);
                                    isset_table = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.List)
                                {
                                    {
                                        TList _list87 = await iprot.ReadListBeginAsync(cancellationToken);
                                        Tputs = new List<TPut>(_list87.Count);
                                        for (int _i88 = 0; _i88 < _list87.Count; ++_i88)
                                        {
                                            TPut _elem89;
                                            _elem89 = new TPut();
                                            await _elem89.ReadAsync(iprot, cancellationToken);
                                            Tputs.Add(_elem89);
                                        }
                                        await iprot.ReadListEndAsync(cancellationToken);
                                    }
                                    isset_tputs = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                    if (!isset_table)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                    if (!isset_tputs)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("putMultiple_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    field.Name = "table";
                    field.Type = TType.String;
                    field.ID = 1;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBinaryAsync(Table, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    field.Name = "tputs";
                    field.Type = TType.List;
                    field.ID = 2;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    {
                        await oprot.WriteListBeginAsync(new TList(TType.Struct, Tputs.Count), cancellationToken);
                        foreach (TPut _iter90 in Tputs)
                        {
                            await _iter90.WriteAsync(oprot, cancellationToken);
                        }
                        await oprot.WriteListEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as putMultipleArgs;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return TCollections.Equals(Table, other.Table)
                  && TCollections.Equals(Tputs, other.Tputs);
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    hashcode = (hashcode * 397) + Table.GetHashCode();
                    hashcode = (hashcode * 397) + TCollections.GetHashCode(Tputs);
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("putMultiple_args(");
                sb.Append(", Table: ");
                sb.Append(Table);
                sb.Append(", Tputs: ");
                sb.Append(Tputs);
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class putMultipleResult : TBase
        {
            private TIOError _io;

            public TIOError Io
            {
                get
                {
                    return _io;
                }
                set
                {
                    __isset.io = true;
                    this._io = value;
                }
            }


            public Isset __isset;
            public struct Isset
            {
                public bool io;
            }

            public putMultipleResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    Io = new TIOError();
                                    await Io.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("putMultiple_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if (this.__isset.io)
                    {
                        if (Io != null)
                        {
                            field.Name = "Io";
                            field.Type = TType.Struct;
                            field.ID = 1;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Io.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as putMultipleResult;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return ((__isset.io == other.__isset.io) && ((!__isset.io) || (System.Object.Equals(Io, other.Io))));
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    if (__isset.io)
                        hashcode = (hashcode * 397) + Io.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("putMultiple_result(");
                bool __first = true;
                if (Io != null && __isset.io)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Io: ");
                    sb.Append(Io == null ? "<null>" : Io.ToString());
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class deleteSingleArgs : TBase
        {

            /// <summary>
            /// the table to delete from
            /// </summary>
            public byte[] Table { get; set; }

            /// <summary>
            /// the TDelete to delete
            /// </summary>
            public TDelete Tdelete { get; set; }

            public deleteSingleArgs()
            {
            }

            public deleteSingleArgs(byte[] table, TDelete tdelete) : this()
            {
                this.Table = table;
                this.Tdelete = tdelete;
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    bool isset_table = false;
                    bool isset_tdelete = false;
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.String)
                                {
                                    Table = await iprot.ReadBinaryAsync(cancellationToken);
                                    isset_table = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.Struct)
                                {
                                    Tdelete = new TDelete();
                                    await Tdelete.ReadAsync(iprot, cancellationToken);
                                    isset_tdelete = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                    if (!isset_table)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                    if (!isset_tdelete)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("deleteSingle_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    field.Name = "table";
                    field.Type = TType.String;
                    field.ID = 1;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBinaryAsync(Table, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    field.Name = "tdelete";
                    field.Type = TType.Struct;
                    field.ID = 2;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await Tdelete.WriteAsync(oprot, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as deleteSingleArgs;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return TCollections.Equals(Table, other.Table)
                  && System.Object.Equals(Tdelete, other.Tdelete);
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    hashcode = (hashcode * 397) + Table.GetHashCode();
                    hashcode = (hashcode * 397) + Tdelete.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("deleteSingle_args(");
                sb.Append(", Table: ");
                sb.Append(Table);
                sb.Append(", Tdelete: ");
                sb.Append(Tdelete == null ? "<null>" : Tdelete.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class deleteSingleResult : TBase
        {
            private TIOError _io;

            public TIOError Io
            {
                get
                {
                    return _io;
                }
                set
                {
                    __isset.io = true;
                    this._io = value;
                }
            }


            public Isset __isset;
            public struct Isset
            {
                public bool io;
            }

            public deleteSingleResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    Io = new TIOError();
                                    await Io.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("deleteSingle_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if (this.__isset.io)
                    {
                        if (Io != null)
                        {
                            field.Name = "Io";
                            field.Type = TType.Struct;
                            field.ID = 1;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Io.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as deleteSingleResult;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return ((__isset.io == other.__isset.io) && ((!__isset.io) || (System.Object.Equals(Io, other.Io))));
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    if (__isset.io)
                        hashcode = (hashcode * 397) + Io.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("deleteSingle_result(");
                bool __first = true;
                if (Io != null && __isset.io)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Io: ");
                    sb.Append(Io == null ? "<null>" : Io.ToString());
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class deleteMultipleArgs : TBase
        {

            /// <summary>
            /// the table to delete from
            /// </summary>
            public byte[] Table { get; set; }

            /// <summary>
            /// list of TDeletes to delete
            /// </summary>
            public List<TDelete> Tdeletes { get; set; }

            public deleteMultipleArgs()
            {
            }

            public deleteMultipleArgs(byte[] table, List<TDelete> tdeletes) : this()
            {
                this.Table = table;
                this.Tdeletes = tdeletes;
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    bool isset_table = false;
                    bool isset_tdeletes = false;
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.String)
                                {
                                    Table = await iprot.ReadBinaryAsync(cancellationToken);
                                    isset_table = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.List)
                                {
                                    {
                                        TList _list91 = await iprot.ReadListBeginAsync(cancellationToken);
                                        Tdeletes = new List<TDelete>(_list91.Count);
                                        for (int _i92 = 0; _i92 < _list91.Count; ++_i92)
                                        {
                                            TDelete _elem93;
                                            _elem93 = new TDelete();
                                            await _elem93.ReadAsync(iprot, cancellationToken);
                                            Tdeletes.Add(_elem93);
                                        }
                                        await iprot.ReadListEndAsync(cancellationToken);
                                    }
                                    isset_tdeletes = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                    if (!isset_table)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                    if (!isset_tdeletes)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("deleteMultiple_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    field.Name = "table";
                    field.Type = TType.String;
                    field.ID = 1;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBinaryAsync(Table, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    field.Name = "tdeletes";
                    field.Type = TType.List;
                    field.ID = 2;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    {
                        await oprot.WriteListBeginAsync(new TList(TType.Struct, Tdeletes.Count), cancellationToken);
                        foreach (TDelete _iter94 in Tdeletes)
                        {
                            await _iter94.WriteAsync(oprot, cancellationToken);
                        }
                        await oprot.WriteListEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as deleteMultipleArgs;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return TCollections.Equals(Table, other.Table)
                  && TCollections.Equals(Tdeletes, other.Tdeletes);
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    hashcode = (hashcode * 397) + Table.GetHashCode();
                    hashcode = (hashcode * 397) + TCollections.GetHashCode(Tdeletes);
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("deleteMultiple_args(");
                sb.Append(", Table: ");
                sb.Append(Table);
                sb.Append(", Tdeletes: ");
                sb.Append(Tdeletes);
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class deleteMultipleResult : TBase
        {
            private List<TDelete> _success;
            private TIOError _io;

            public List<TDelete> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public TIOError Io
            {
                get
                {
                    return _io;
                }
                set
                {
                    __isset.io = true;
                    this._io = value;
                }
            }


            public Isset __isset;
            public struct Isset
            {
                public bool success;
                public bool io;
            }

            public deleteMultipleResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.List)
                                {
                                    {
                                        TList _list95 = await iprot.ReadListBeginAsync(cancellationToken);
                                        Success = new List<TDelete>(_list95.Count);
                                        for (int _i96 = 0; _i96 < _list95.Count; ++_i96)
                                        {
                                            TDelete _elem97;
                                            _elem97 = new TDelete();
                                            await _elem97.ReadAsync(iprot, cancellationToken);
                                            Success.Add(_elem97);
                                        }
                                        await iprot.ReadListEndAsync(cancellationToken);
                                    }
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    Io = new TIOError();
                                    await Io.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("deleteMultiple_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if (this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.List;
                            field.ID = 0;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            {
                                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                                foreach (TDelete _iter98 in Success)
                                {
                                    await _iter98.WriteAsync(oprot, cancellationToken);
                                }
                                await oprot.WriteListEndAsync(cancellationToken);
                            }
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    else if (this.__isset.io)
                    {
                        if (Io != null)
                        {
                            field.Name = "Io";
                            field.Type = TType.Struct;
                            field.ID = 1;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Io.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as deleteMultipleResult;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
                  && ((__isset.io == other.__isset.io) && ((!__isset.io) || (System.Object.Equals(Io, other.Io))));
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    if (__isset.success)
                        hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
                    if (__isset.io)
                        hashcode = (hashcode * 397) + Io.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("deleteMultiple_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success);
                }
                if (Io != null && __isset.io)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Io: ");
                    sb.Append(Io == null ? "<null>" : Io.ToString());
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class checkAndDeleteArgs : TBase
        {
            private byte[] _value;

            /// <summary>
            /// to check in and delete from
            /// </summary>
            public byte[] Table { get; set; }

            /// <summary>
            /// row to check
            /// </summary>
            public byte[] Row { get; set; }

            /// <summary>
            /// column family to check
            /// </summary>
            public byte[] Family { get; set; }

            /// <summary>
            /// column qualifier to check
            /// </summary>
            public byte[] Qualifier { get; set; }

            /// <summary>
            /// the expected value, if not provided the
            /// check is for the non-existence of the
            /// column in question
            /// </summary>
            public byte[] Value
            {
                get
                {
                    return _value;
                }
                set
                {
                    __isset.@value = true;
                    this._value = value;
                }
            }

            /// <summary>
            /// the TDelete to execute if the check succeeds
            /// </summary>
            public TDelete Tdelete { get; set; }


            public Isset __isset;
            public struct Isset
            {
                public bool @value;
            }

            public checkAndDeleteArgs()
            {
            }

            public checkAndDeleteArgs(byte[] table, byte[] row, byte[] family, byte[] qualifier, TDelete tdelete) : this()
            {
                this.Table = table;
                this.Row = row;
                this.Family = family;
                this.Qualifier = qualifier;
                this.Tdelete = tdelete;
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    bool isset_table = false;
                    bool isset_row = false;
                    bool isset_family = false;
                    bool isset_qualifier = false;
                    bool isset_tdelete = false;
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.String)
                                {
                                    Table = await iprot.ReadBinaryAsync(cancellationToken);
                                    isset_table = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.String)
                                {
                                    Row = await iprot.ReadBinaryAsync(cancellationToken);
                                    isset_row = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 3:
                                if (field.Type == TType.String)
                                {
                                    Family = await iprot.ReadBinaryAsync(cancellationToken);
                                    isset_family = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 4:
                                if (field.Type == TType.String)
                                {
                                    Qualifier = await iprot.ReadBinaryAsync(cancellationToken);
                                    isset_qualifier = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 5:
                                if (field.Type == TType.String)
                                {
                                    Value = await iprot.ReadBinaryAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 6:
                                if (field.Type == TType.Struct)
                                {
                                    Tdelete = new TDelete();
                                    await Tdelete.ReadAsync(iprot, cancellationToken);
                                    isset_tdelete = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                    if (!isset_table)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                    if (!isset_row)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                    if (!isset_family)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                    if (!isset_qualifier)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                    if (!isset_tdelete)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("checkAndDelete_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    field.Name = "table";
                    field.Type = TType.String;
                    field.ID = 1;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBinaryAsync(Table, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    field.Name = "row";
                    field.Type = TType.String;
                    field.ID = 2;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBinaryAsync(Row, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    field.Name = "family";
                    field.Type = TType.String;
                    field.ID = 3;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBinaryAsync(Family, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    field.Name = "qualifier";
                    field.Type = TType.String;
                    field.ID = 4;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBinaryAsync(Qualifier, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    if (Value != null && __isset.@value)
                    {
                        field.Name = "value";
                        field.Type = TType.String;
                        field.ID = 5;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteBinaryAsync(Value, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    field.Name = "tdelete";
                    field.Type = TType.Struct;
                    field.ID = 6;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await Tdelete.WriteAsync(oprot, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as checkAndDeleteArgs;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return TCollections.Equals(Table, other.Table)
                  && TCollections.Equals(Row, other.Row)
                  && TCollections.Equals(Family, other.Family)
                  && TCollections.Equals(Qualifier, other.Qualifier)
                  && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (TCollections.Equals(Value, other.Value))))
                  && System.Object.Equals(Tdelete, other.Tdelete);
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    hashcode = (hashcode * 397) + Table.GetHashCode();
                    hashcode = (hashcode * 397) + Row.GetHashCode();
                    hashcode = (hashcode * 397) + Family.GetHashCode();
                    hashcode = (hashcode * 397) + Qualifier.GetHashCode();
                    if (__isset.@value)
                        hashcode = (hashcode * 397) + Value.GetHashCode();
                    hashcode = (hashcode * 397) + Tdelete.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("checkAndDelete_args(");
                sb.Append(", Table: ");
                sb.Append(Table);
                sb.Append(", Row: ");
                sb.Append(Row);
                sb.Append(", Family: ");
                sb.Append(Family);
                sb.Append(", Qualifier: ");
                sb.Append(Qualifier);
                if (Value != null && __isset.@value)
                {
                    sb.Append(", Value: ");
                    sb.Append(Value);
                }
                sb.Append(", Tdelete: ");
                sb.Append(Tdelete == null ? "<null>" : Tdelete.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class checkAndDeleteResult : TBase
        {
            private bool _success;
            private TIOError _io;

            public bool Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public TIOError Io
            {
                get
                {
                    return _io;
                }
                set
                {
                    __isset.io = true;
                    this._io = value;
                }
            }


            public Isset __isset;
            public struct Isset
            {
                public bool success;
                public bool io;
            }

            public checkAndDeleteResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.Bool)
                                {
                                    Success = await iprot.ReadBoolAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    Io = new TIOError();
                                    await Io.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("checkAndDelete_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if (this.__isset.success)
                    {
                        field.Name = "Success";
                        field.Type = TType.Bool;
                        field.ID = 0;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteBoolAsync(Success, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    else if (this.__isset.io)
                    {
                        if (Io != null)
                        {
                            field.Name = "Io";
                            field.Type = TType.Struct;
                            field.ID = 1;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Io.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as checkAndDeleteResult;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
                  && ((__isset.io == other.__isset.io) && ((!__isset.io) || (System.Object.Equals(Io, other.Io))));
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    if (__isset.success)
                        hashcode = (hashcode * 397) + Success.GetHashCode();
                    if (__isset.io)
                        hashcode = (hashcode * 397) + Io.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("checkAndDelete_result(");
                bool __first = true;
                if (__isset.success)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success);
                }
                if (Io != null && __isset.io)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Io: ");
                    sb.Append(Io == null ? "<null>" : Io.ToString());
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class incrementArgs : TBase
        {

            /// <summary>
            /// the table to increment the value on
            /// </summary>
            public byte[] Table { get; set; }

            /// <summary>
            /// the TIncrement to increment
            /// </summary>
            public TIncrement Tincrement { get; set; }

            public incrementArgs()
            {
            }

            public incrementArgs(byte[] table, TIncrement tincrement) : this()
            {
                this.Table = table;
                this.Tincrement = tincrement;
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    bool isset_table = false;
                    bool isset_tincrement = false;
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.String)
                                {
                                    Table = await iprot.ReadBinaryAsync(cancellationToken);
                                    isset_table = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.Struct)
                                {
                                    Tincrement = new TIncrement();
                                    await Tincrement.ReadAsync(iprot, cancellationToken);
                                    isset_tincrement = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                    if (!isset_table)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                    if (!isset_tincrement)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("increment_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    field.Name = "table";
                    field.Type = TType.String;
                    field.ID = 1;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBinaryAsync(Table, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    field.Name = "tincrement";
                    field.Type = TType.Struct;
                    field.ID = 2;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await Tincrement.WriteAsync(oprot, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as incrementArgs;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return TCollections.Equals(Table, other.Table)
                  && System.Object.Equals(Tincrement, other.Tincrement);
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    hashcode = (hashcode * 397) + Table.GetHashCode();
                    hashcode = (hashcode * 397) + Tincrement.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("increment_args(");
                sb.Append(", Table: ");
                sb.Append(Table);
                sb.Append(", Tincrement: ");
                sb.Append(Tincrement == null ? "<null>" : Tincrement.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class incrementResult : TBase
        {
            private TResult _success;
            private TIOError _io;

            public TResult Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public TIOError Io
            {
                get
                {
                    return _io;
                }
                set
                {
                    __isset.io = true;
                    this._io = value;
                }
            }


            public Isset __isset;
            public struct Isset
            {
                public bool success;
                public bool io;
            }

            public incrementResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.Struct)
                                {
                                    Success = new TResult();
                                    await Success.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    Io = new TIOError();
                                    await Io.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("increment_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if (this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.Struct;
                            field.ID = 0;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Success.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    else if (this.__isset.io)
                    {
                        if (Io != null)
                        {
                            field.Name = "Io";
                            field.Type = TType.Struct;
                            field.ID = 1;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Io.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as incrementResult;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
                  && ((__isset.io == other.__isset.io) && ((!__isset.io) || (System.Object.Equals(Io, other.Io))));
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    if (__isset.success)
                        hashcode = (hashcode * 397) + Success.GetHashCode();
                    if (__isset.io)
                        hashcode = (hashcode * 397) + Io.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("increment_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success == null ? "<null>" : Success.ToString());
                }
                if (Io != null && __isset.io)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Io: ");
                    sb.Append(Io == null ? "<null>" : Io.ToString());
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class appendArgs : TBase
        {

            /// <summary>
            /// the table to append the value on
            /// </summary>
            public byte[] Table { get; set; }

            /// <summary>
            /// the TAppend to append
            /// </summary>
            public TAppend Tappend { get; set; }

            public appendArgs()
            {
            }

            public appendArgs(byte[] table, TAppend tappend) : this()
            {
                this.Table = table;
                this.Tappend = tappend;
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    bool isset_table = false;
                    bool isset_tappend = false;
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.String)
                                {
                                    Table = await iprot.ReadBinaryAsync(cancellationToken);
                                    isset_table = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.Struct)
                                {
                                    Tappend = new TAppend();
                                    await Tappend.ReadAsync(iprot, cancellationToken);
                                    isset_tappend = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                    if (!isset_table)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                    if (!isset_tappend)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("append_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    field.Name = "table";
                    field.Type = TType.String;
                    field.ID = 1;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBinaryAsync(Table, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    field.Name = "tappend";
                    field.Type = TType.Struct;
                    field.ID = 2;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await Tappend.WriteAsync(oprot, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as appendArgs;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return TCollections.Equals(Table, other.Table)
                  && System.Object.Equals(Tappend, other.Tappend);
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    hashcode = (hashcode * 397) + Table.GetHashCode();
                    hashcode = (hashcode * 397) + Tappend.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("append_args(");
                sb.Append(", Table: ");
                sb.Append(Table);
                sb.Append(", Tappend: ");
                sb.Append(Tappend == null ? "<null>" : Tappend.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class appendResult : TBase
        {
            private TResult _success;
            private TIOError _io;

            public TResult Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public TIOError Io
            {
                get
                {
                    return _io;
                }
                set
                {
                    __isset.io = true;
                    this._io = value;
                }
            }


            public Isset __isset;
            public struct Isset
            {
                public bool success;
                public bool io;
            }

            public appendResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.Struct)
                                {
                                    Success = new TResult();
                                    await Success.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    Io = new TIOError();
                                    await Io.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("append_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if (this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.Struct;
                            field.ID = 0;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Success.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    else if (this.__isset.io)
                    {
                        if (Io != null)
                        {
                            field.Name = "Io";
                            field.Type = TType.Struct;
                            field.ID = 1;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Io.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as appendResult;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
                  && ((__isset.io == other.__isset.io) && ((!__isset.io) || (System.Object.Equals(Io, other.Io))));
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    if (__isset.success)
                        hashcode = (hashcode * 397) + Success.GetHashCode();
                    if (__isset.io)
                        hashcode = (hashcode * 397) + Io.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("append_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success == null ? "<null>" : Success.ToString());
                }
                if (Io != null && __isset.io)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Io: ");
                    sb.Append(Io == null ? "<null>" : Io.ToString());
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class openScannerArgs : TBase
        {

            /// <summary>
            /// the table to get the Scanner for
            /// </summary>
            public byte[] Table { get; set; }

            /// <summary>
            /// the scan object to get a Scanner for
            /// </summary>
            public TScan Tscan { get; set; }

            public openScannerArgs()
            {
            }

            public openScannerArgs(byte[] table, TScan tscan) : this()
            {
                this.Table = table;
                this.Tscan = tscan;
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    bool isset_table = false;
                    bool isset_tscan = false;
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.String)
                                {
                                    Table = await iprot.ReadBinaryAsync(cancellationToken);
                                    isset_table = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.Struct)
                                {
                                    Tscan = new TScan();
                                    await Tscan.ReadAsync(iprot, cancellationToken);
                                    isset_tscan = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                    if (!isset_table)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                    if (!isset_tscan)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("openScanner_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    field.Name = "table";
                    field.Type = TType.String;
                    field.ID = 1;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBinaryAsync(Table, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    field.Name = "tscan";
                    field.Type = TType.Struct;
                    field.ID = 2;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await Tscan.WriteAsync(oprot, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as openScannerArgs;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return TCollections.Equals(Table, other.Table)
                  && System.Object.Equals(Tscan, other.Tscan);
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    hashcode = (hashcode * 397) + Table.GetHashCode();
                    hashcode = (hashcode * 397) + Tscan.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("openScanner_args(");
                sb.Append(", Table: ");
                sb.Append(Table);
                sb.Append(", Tscan: ");
                sb.Append(Tscan == null ? "<null>" : Tscan.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class openScannerResult : TBase
        {
            private int _success;
            private TIOError _io;

            public int Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public TIOError Io
            {
                get
                {
                    return _io;
                }
                set
                {
                    __isset.io = true;
                    this._io = value;
                }
            }


            public Isset __isset;
            public struct Isset
            {
                public bool success;
                public bool io;
            }

            public openScannerResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.I32)
                                {
                                    Success = await iprot.ReadI32Async(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    Io = new TIOError();
                                    await Io.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("openScanner_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if (this.__isset.success)
                    {
                        field.Name = "Success";
                        field.Type = TType.I32;
                        field.ID = 0;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteI32Async(Success, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    else if (this.__isset.io)
                    {
                        if (Io != null)
                        {
                            field.Name = "Io";
                            field.Type = TType.Struct;
                            field.ID = 1;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Io.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as openScannerResult;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
                  && ((__isset.io == other.__isset.io) && ((!__isset.io) || (System.Object.Equals(Io, other.Io))));
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    if (__isset.success)
                        hashcode = (hashcode * 397) + Success.GetHashCode();
                    if (__isset.io)
                        hashcode = (hashcode * 397) + Io.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("openScanner_result(");
                bool __first = true;
                if (__isset.success)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success);
                }
                if (Io != null && __isset.io)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Io: ");
                    sb.Append(Io == null ? "<null>" : Io.ToString());
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class getScannerRowsArgs : TBase
        {
            private int _numRows;

            /// <summary>
            /// the Id of the Scanner to return rows from. This is an Id returned from the openScanner function.
            /// </summary>
            public int ScannerId { get; set; }

            /// <summary>
            /// number of rows to return
            /// </summary>
            public int NumRows
            {
                get
                {
                    return _numRows;
                }
                set
                {
                    __isset.numRows = true;
                    this._numRows = value;
                }
            }


            public Isset __isset;
            public struct Isset
            {
                public bool numRows;
            }

            public getScannerRowsArgs()
            {
                this._numRows = 1;
                this.__isset.numRows = true;
            }

            public getScannerRowsArgs(int scannerId) : this()
            {
                this.ScannerId = scannerId;
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    bool isset_scannerId = false;
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.I32)
                                {
                                    ScannerId = await iprot.ReadI32Async(cancellationToken);
                                    isset_scannerId = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.I32)
                                {
                                    NumRows = await iprot.ReadI32Async(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                    if (!isset_scannerId)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("getScannerRows_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    field.Name = "scannerId";
                    field.Type = TType.I32;
                    field.ID = 1;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteI32Async(ScannerId, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    if (__isset.numRows)
                    {
                        field.Name = "numRows";
                        field.Type = TType.I32;
                        field.ID = 2;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteI32Async(NumRows, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as getScannerRowsArgs;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return System.Object.Equals(ScannerId, other.ScannerId)
                  && ((__isset.numRows == other.__isset.numRows) && ((!__isset.numRows) || (System.Object.Equals(NumRows, other.NumRows))));
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    hashcode = (hashcode * 397) + ScannerId.GetHashCode();
                    if (__isset.numRows)
                        hashcode = (hashcode * 397) + NumRows.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("getScannerRows_args(");
                sb.Append(", ScannerId: ");
                sb.Append(ScannerId);
                if (__isset.numRows)
                {
                    sb.Append(", NumRows: ");
                    sb.Append(NumRows);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class getScannerRowsResult : TBase
        {
            private List<TResult> _success;
            private TIOError _io;
            private TIllegalArgument _ia;

            public List<TResult> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public TIOError Io
            {
                get
                {
                    return _io;
                }
                set
                {
                    __isset.io = true;
                    this._io = value;
                }
            }

            /// <summary>
            /// if the scannerId is invalid
            /// </summary>
            public TIllegalArgument Ia
            {
                get
                {
                    return _ia;
                }
                set
                {
                    __isset.ia = true;
                    this._ia = value;
                }
            }


            public Isset __isset;
            public struct Isset
            {
                public bool success;
                public bool io;
                public bool ia;
            }

            public getScannerRowsResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.List)
                                {
                                    {
                                        TList _list99 = await iprot.ReadListBeginAsync(cancellationToken);
                                        Success = new List<TResult>(_list99.Count);
                                        for (int _i100 = 0; _i100 < _list99.Count; ++_i100)
                                        {
                                            TResult _elem101;
                                            _elem101 = new TResult();
                                            await _elem101.ReadAsync(iprot, cancellationToken);
                                            Success.Add(_elem101);
                                        }
                                        await iprot.ReadListEndAsync(cancellationToken);
                                    }
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    Io = new TIOError();
                                    await Io.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.Struct)
                                {
                                    Ia = new TIllegalArgument();
                                    await Ia.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("getScannerRows_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if (this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.List;
                            field.ID = 0;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            {
                                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                                foreach (TResult _iter102 in Success)
                                {
                                    await _iter102.WriteAsync(oprot, cancellationToken);
                                }
                                await oprot.WriteListEndAsync(cancellationToken);
                            }
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    else if (this.__isset.io)
                    {
                        if (Io != null)
                        {
                            field.Name = "Io";
                            field.Type = TType.Struct;
                            field.ID = 1;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Io.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    else if (this.__isset.ia)
                    {
                        if (Ia != null)
                        {
                            field.Name = "Ia";
                            field.Type = TType.Struct;
                            field.ID = 2;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Ia.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as getScannerRowsResult;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
                  && ((__isset.io == other.__isset.io) && ((!__isset.io) || (System.Object.Equals(Io, other.Io))))
                  && ((__isset.ia == other.__isset.ia) && ((!__isset.ia) || (System.Object.Equals(Ia, other.Ia))));
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    if (__isset.success)
                        hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
                    if (__isset.io)
                        hashcode = (hashcode * 397) + Io.GetHashCode();
                    if (__isset.ia)
                        hashcode = (hashcode * 397) + Ia.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("getScannerRows_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success);
                }
                if (Io != null && __isset.io)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Io: ");
                    sb.Append(Io == null ? "<null>" : Io.ToString());
                }
                if (Ia != null && __isset.ia)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Ia: ");
                    sb.Append(Ia == null ? "<null>" : Ia.ToString());
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class closeScannerArgs : TBase
        {

            /// <summary>
            /// the Id of the Scanner to close *
            /// </summary>
            public int ScannerId { get; set; }

            public closeScannerArgs()
            {
            }

            public closeScannerArgs(int scannerId) : this()
            {
                this.ScannerId = scannerId;
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    bool isset_scannerId = false;
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.I32)
                                {
                                    ScannerId = await iprot.ReadI32Async(cancellationToken);
                                    isset_scannerId = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                    if (!isset_scannerId)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("closeScanner_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    field.Name = "scannerId";
                    field.Type = TType.I32;
                    field.ID = 1;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteI32Async(ScannerId, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as closeScannerArgs;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return System.Object.Equals(ScannerId, other.ScannerId);
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    hashcode = (hashcode * 397) + ScannerId.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("closeScanner_args(");
                sb.Append(", ScannerId: ");
                sb.Append(ScannerId);
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class closeScannerResult : TBase
        {
            private TIOError _io;
            private TIllegalArgument _ia;

            public TIOError Io
            {
                get
                {
                    return _io;
                }
                set
                {
                    __isset.io = true;
                    this._io = value;
                }
            }

            /// <summary>
            /// if the scannerId is invalid
            /// </summary>
            public TIllegalArgument Ia
            {
                get
                {
                    return _ia;
                }
                set
                {
                    __isset.ia = true;
                    this._ia = value;
                }
            }


            public Isset __isset;
            public struct Isset
            {
                public bool io;
                public bool ia;
            }

            public closeScannerResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    Io = new TIOError();
                                    await Io.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.Struct)
                                {
                                    Ia = new TIllegalArgument();
                                    await Ia.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("closeScanner_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if (this.__isset.io)
                    {
                        if (Io != null)
                        {
                            field.Name = "Io";
                            field.Type = TType.Struct;
                            field.ID = 1;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Io.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    else if (this.__isset.ia)
                    {
                        if (Ia != null)
                        {
                            field.Name = "Ia";
                            field.Type = TType.Struct;
                            field.ID = 2;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Ia.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as closeScannerResult;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return ((__isset.io == other.__isset.io) && ((!__isset.io) || (System.Object.Equals(Io, other.Io))))
                  && ((__isset.ia == other.__isset.ia) && ((!__isset.ia) || (System.Object.Equals(Ia, other.Ia))));
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    if (__isset.io)
                        hashcode = (hashcode * 397) + Io.GetHashCode();
                    if (__isset.ia)
                        hashcode = (hashcode * 397) + Ia.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("closeScanner_result(");
                bool __first = true;
                if (Io != null && __isset.io)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Io: ");
                    sb.Append(Io == null ? "<null>" : Io.ToString());
                }
                if (Ia != null && __isset.ia)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Ia: ");
                    sb.Append(Ia == null ? "<null>" : Ia.ToString());
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class mutateRowArgs : TBase
        {

            /// <summary>
            /// table to apply the mutations
            /// </summary>
            public byte[] Table { get; set; }

            /// <summary>
            /// mutations to apply
            /// </summary>
            public TRowMutations TrowMutations { get; set; }

            public mutateRowArgs()
            {
            }

            public mutateRowArgs(byte[] table, TRowMutations trowMutations) : this()
            {
                this.Table = table;
                this.TrowMutations = trowMutations;
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    bool isset_table = false;
                    bool isset_trowMutations = false;
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.String)
                                {
                                    Table = await iprot.ReadBinaryAsync(cancellationToken);
                                    isset_table = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.Struct)
                                {
                                    TrowMutations = new TRowMutations();
                                    await TrowMutations.ReadAsync(iprot, cancellationToken);
                                    isset_trowMutations = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                    if (!isset_table)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                    if (!isset_trowMutations)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("mutateRow_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    field.Name = "table";
                    field.Type = TType.String;
                    field.ID = 1;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBinaryAsync(Table, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    field.Name = "trowMutations";
                    field.Type = TType.Struct;
                    field.ID = 2;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await TrowMutations.WriteAsync(oprot, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as mutateRowArgs;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return TCollections.Equals(Table, other.Table)
                  && System.Object.Equals(TrowMutations, other.TrowMutations);
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    hashcode = (hashcode * 397) + Table.GetHashCode();
                    hashcode = (hashcode * 397) + TrowMutations.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("mutateRow_args(");
                sb.Append(", Table: ");
                sb.Append(Table);
                sb.Append(", TrowMutations: ");
                sb.Append(TrowMutations == null ? "<null>" : TrowMutations.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class mutateRowResult : TBase
        {
            private TIOError _io;

            public TIOError Io
            {
                get
                {
                    return _io;
                }
                set
                {
                    __isset.io = true;
                    this._io = value;
                }
            }


            public Isset __isset;
            public struct Isset
            {
                public bool io;
            }

            public mutateRowResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    Io = new TIOError();
                                    await Io.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("mutateRow_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if (this.__isset.io)
                    {
                        if (Io != null)
                        {
                            field.Name = "Io";
                            field.Type = TType.Struct;
                            field.ID = 1;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Io.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as mutateRowResult;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return ((__isset.io == other.__isset.io) && ((!__isset.io) || (System.Object.Equals(Io, other.Io))));
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    if (__isset.io)
                        hashcode = (hashcode * 397) + Io.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("mutateRow_result(");
                bool __first = true;
                if (Io != null && __isset.io)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Io: ");
                    sb.Append(Io == null ? "<null>" : Io.ToString());
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class getScannerResultsArgs : TBase
        {
            private int _numRows;

            /// <summary>
            /// the table to get the Scanner for
            /// </summary>
            public byte[] Table { get; set; }

            /// <summary>
            /// the scan object to get a Scanner for
            /// </summary>
            public TScan Tscan { get; set; }

            /// <summary>
            /// number of rows to return
            /// </summary>
            public int NumRows
            {
                get
                {
                    return _numRows;
                }
                set
                {
                    __isset.numRows = true;
                    this._numRows = value;
                }
            }


            public Isset __isset;
            public struct Isset
            {
                public bool numRows;
            }

            public getScannerResultsArgs()
            {
                this._numRows = 1;
                this.__isset.numRows = true;
            }

            public getScannerResultsArgs(byte[] table, TScan tscan) : this()
            {
                this.Table = table;
                this.Tscan = tscan;
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    bool isset_table = false;
                    bool isset_tscan = false;
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.String)
                                {
                                    Table = await iprot.ReadBinaryAsync(cancellationToken);
                                    isset_table = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.Struct)
                                {
                                    Tscan = new TScan();
                                    await Tscan.ReadAsync(iprot, cancellationToken);
                                    isset_tscan = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 3:
                                if (field.Type == TType.I32)
                                {
                                    NumRows = await iprot.ReadI32Async(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                    if (!isset_table)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                    if (!isset_tscan)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("getScannerResults_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    field.Name = "table";
                    field.Type = TType.String;
                    field.ID = 1;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBinaryAsync(Table, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    field.Name = "tscan";
                    field.Type = TType.Struct;
                    field.ID = 2;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await Tscan.WriteAsync(oprot, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    if (__isset.numRows)
                    {
                        field.Name = "numRows";
                        field.Type = TType.I32;
                        field.ID = 3;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteI32Async(NumRows, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as getScannerResultsArgs;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return TCollections.Equals(Table, other.Table)
                  && System.Object.Equals(Tscan, other.Tscan)
                  && ((__isset.numRows == other.__isset.numRows) && ((!__isset.numRows) || (System.Object.Equals(NumRows, other.NumRows))));
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    hashcode = (hashcode * 397) + Table.GetHashCode();
                    hashcode = (hashcode * 397) + Tscan.GetHashCode();
                    if (__isset.numRows)
                        hashcode = (hashcode * 397) + NumRows.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("getScannerResults_args(");
                sb.Append(", Table: ");
                sb.Append(Table);
                sb.Append(", Tscan: ");
                sb.Append(Tscan == null ? "<null>" : Tscan.ToString());
                if (__isset.numRows)
                {
                    sb.Append(", NumRows: ");
                    sb.Append(NumRows);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class getScannerResultsResult : TBase
        {
            private List<TResult> _success;
            private TIOError _io;

            public List<TResult> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public TIOError Io
            {
                get
                {
                    return _io;
                }
                set
                {
                    __isset.io = true;
                    this._io = value;
                }
            }


            public Isset __isset;
            public struct Isset
            {
                public bool success;
                public bool io;
            }

            public getScannerResultsResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.List)
                                {
                                    {
                                        TList _list103 = await iprot.ReadListBeginAsync(cancellationToken);
                                        Success = new List<TResult>(_list103.Count);
                                        for (int _i104 = 0; _i104 < _list103.Count; ++_i104)
                                        {
                                            TResult _elem105;
                                            _elem105 = new TResult();
                                            await _elem105.ReadAsync(iprot, cancellationToken);
                                            Success.Add(_elem105);
                                        }
                                        await iprot.ReadListEndAsync(cancellationToken);
                                    }
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    Io = new TIOError();
                                    await Io.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("getScannerResults_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if (this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.List;
                            field.ID = 0;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            {
                                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                                foreach (TResult _iter106 in Success)
                                {
                                    await _iter106.WriteAsync(oprot, cancellationToken);
                                }
                                await oprot.WriteListEndAsync(cancellationToken);
                            }
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    else if (this.__isset.io)
                    {
                        if (Io != null)
                        {
                            field.Name = "Io";
                            field.Type = TType.Struct;
                            field.ID = 1;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Io.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as getScannerResultsResult;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
                  && ((__isset.io == other.__isset.io) && ((!__isset.io) || (System.Object.Equals(Io, other.Io))));
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    if (__isset.success)
                        hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
                    if (__isset.io)
                        hashcode = (hashcode * 397) + Io.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("getScannerResults_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success);
                }
                if (Io != null && __isset.io)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Io: ");
                    sb.Append(Io == null ? "<null>" : Io.ToString());
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class getRegionLocationArgs : TBase
        {
            private bool _reload;

            public byte[] Table { get; set; }

            public byte[] Row { get; set; }

            public bool Reload
            {
                get
                {
                    return _reload;
                }
                set
                {
                    __isset.reload = true;
                    this._reload = value;
                }
            }


            public Isset __isset;
            public struct Isset
            {
                public bool reload;
            }

            public getRegionLocationArgs()
            {
            }

            public getRegionLocationArgs(byte[] table, byte[] row) : this()
            {
                this.Table = table;
                this.Row = row;
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    bool isset_table = false;
                    bool isset_row = false;
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.String)
                                {
                                    Table = await iprot.ReadBinaryAsync(cancellationToken);
                                    isset_table = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.String)
                                {
                                    Row = await iprot.ReadBinaryAsync(cancellationToken);
                                    isset_row = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 3:
                                if (field.Type == TType.Bool)
                                {
                                    Reload = await iprot.ReadBoolAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                    if (!isset_table)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                    if (!isset_row)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("getRegionLocation_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    field.Name = "table";
                    field.Type = TType.String;
                    field.ID = 1;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBinaryAsync(Table, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    field.Name = "row";
                    field.Type = TType.String;
                    field.ID = 2;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBinaryAsync(Row, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    if (__isset.reload)
                    {
                        field.Name = "reload";
                        field.Type = TType.Bool;
                        field.ID = 3;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteBoolAsync(Reload, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as getRegionLocationArgs;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return TCollections.Equals(Table, other.Table)
                  && TCollections.Equals(Row, other.Row)
                  && ((__isset.reload == other.__isset.reload) && ((!__isset.reload) || (System.Object.Equals(Reload, other.Reload))));
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    hashcode = (hashcode * 397) + Table.GetHashCode();
                    hashcode = (hashcode * 397) + Row.GetHashCode();
                    if (__isset.reload)
                        hashcode = (hashcode * 397) + Reload.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("getRegionLocation_args(");
                sb.Append(", Table: ");
                sb.Append(Table);
                sb.Append(", Row: ");
                sb.Append(Row);
                if (__isset.reload)
                {
                    sb.Append(", Reload: ");
                    sb.Append(Reload);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class getRegionLocationResult : TBase
        {
            private THRegionLocation _success;
            private TIOError _io;

            public THRegionLocation Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public TIOError Io
            {
                get
                {
                    return _io;
                }
                set
                {
                    __isset.io = true;
                    this._io = value;
                }
            }


            public Isset __isset;
            public struct Isset
            {
                public bool success;
                public bool io;
            }

            public getRegionLocationResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.Struct)
                                {
                                    Success = new THRegionLocation();
                                    await Success.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    Io = new TIOError();
                                    await Io.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("getRegionLocation_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if (this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.Struct;
                            field.ID = 0;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Success.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    else if (this.__isset.io)
                    {
                        if (Io != null)
                        {
                            field.Name = "Io";
                            field.Type = TType.Struct;
                            field.ID = 1;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Io.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as getRegionLocationResult;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
                  && ((__isset.io == other.__isset.io) && ((!__isset.io) || (System.Object.Equals(Io, other.Io))));
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    if (__isset.success)
                        hashcode = (hashcode * 397) + Success.GetHashCode();
                    if (__isset.io)
                        hashcode = (hashcode * 397) + Io.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("getRegionLocation_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success == null ? "<null>" : Success.ToString());
                }
                if (Io != null && __isset.io)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Io: ");
                    sb.Append(Io == null ? "<null>" : Io.ToString());
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class getAllRegionLocationsArgs : TBase
        {

            public byte[] Table { get; set; }

            public getAllRegionLocationsArgs()
            {
            }

            public getAllRegionLocationsArgs(byte[] table) : this()
            {
                this.Table = table;
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    bool isset_table = false;
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.String)
                                {
                                    Table = await iprot.ReadBinaryAsync(cancellationToken);
                                    isset_table = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                    if (!isset_table)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("getAllRegionLocations_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    field.Name = "table";
                    field.Type = TType.String;
                    field.ID = 1;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBinaryAsync(Table, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as getAllRegionLocationsArgs;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return TCollections.Equals(Table, other.Table);
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    hashcode = (hashcode * 397) + Table.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("getAllRegionLocations_args(");
                sb.Append(", Table: ");
                sb.Append(Table);
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class getAllRegionLocationsResult : TBase
        {
            private List<THRegionLocation> _success;
            private TIOError _io;

            public List<THRegionLocation> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public TIOError Io
            {
                get
                {
                    return _io;
                }
                set
                {
                    __isset.io = true;
                    this._io = value;
                }
            }


            public Isset __isset;
            public struct Isset
            {
                public bool success;
                public bool io;
            }

            public getAllRegionLocationsResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.List)
                                {
                                    {
                                        TList _list107 = await iprot.ReadListBeginAsync(cancellationToken);
                                        Success = new List<THRegionLocation>(_list107.Count);
                                        for (int _i108 = 0; _i108 < _list107.Count; ++_i108)
                                        {
                                            THRegionLocation _elem109;
                                            _elem109 = new THRegionLocation();
                                            await _elem109.ReadAsync(iprot, cancellationToken);
                                            Success.Add(_elem109);
                                        }
                                        await iprot.ReadListEndAsync(cancellationToken);
                                    }
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    Io = new TIOError();
                                    await Io.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("getAllRegionLocations_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if (this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.List;
                            field.ID = 0;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            {
                                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                                foreach (THRegionLocation _iter110 in Success)
                                {
                                    await _iter110.WriteAsync(oprot, cancellationToken);
                                }
                                await oprot.WriteListEndAsync(cancellationToken);
                            }
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    else if (this.__isset.io)
                    {
                        if (Io != null)
                        {
                            field.Name = "Io";
                            field.Type = TType.Struct;
                            field.ID = 1;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Io.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as getAllRegionLocationsResult;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
                  && ((__isset.io == other.__isset.io) && ((!__isset.io) || (System.Object.Equals(Io, other.Io))));
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    if (__isset.success)
                        hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
                    if (__isset.io)
                        hashcode = (hashcode * 397) + Io.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("getAllRegionLocations_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success);
                }
                if (Io != null && __isset.io)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Io: ");
                    sb.Append(Io == null ? "<null>" : Io.ToString());
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class checkAndMutateArgs : TBase
        {
            private byte[] _value;

            /// <summary>
            /// to check in and delete from
            /// </summary>
            public byte[] Table { get; set; }

            /// <summary>
            /// row to check
            /// </summary>
            public byte[] Row { get; set; }

            /// <summary>
            /// column family to check
            /// </summary>
            public byte[] Family { get; set; }

            /// <summary>
            /// column qualifier to check
            /// </summary>
            public byte[] Qualifier { get; set; }

            /// <summary>
            /// comparison to make on the value
            /// 
            /// <seealso cref="TCompareOp"/>
            /// </summary>
            public TCompareOp CompareOp { get; set; }

            /// <summary>
            /// the expected value to be compared against, if not provided the
            /// check is for the non-existence of the column in question
            /// </summary>
            public byte[] Value
            {
                get
                {
                    return _value;
                }
                set
                {
                    __isset.@value = true;
                    this._value = value;
                }
            }

            /// <summary>
            /// row mutations to execute if the value matches
            /// </summary>
            public TRowMutations RowMutations { get; set; }


            public Isset __isset;
            public struct Isset
            {
                public bool @value;
            }

            public checkAndMutateArgs()
            {
            }

            public checkAndMutateArgs(byte[] table, byte[] row, byte[] family, byte[] qualifier, TCompareOp compareOp, TRowMutations rowMutations) : this()
            {
                this.Table = table;
                this.Row = row;
                this.Family = family;
                this.Qualifier = qualifier;
                this.CompareOp = compareOp;
                this.RowMutations = rowMutations;
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    bool isset_table = false;
                    bool isset_row = false;
                    bool isset_family = false;
                    bool isset_qualifier = false;
                    bool isset_compareOp = false;
                    bool isset_rowMutations = false;
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.String)
                                {
                                    Table = await iprot.ReadBinaryAsync(cancellationToken);
                                    isset_table = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.String)
                                {
                                    Row = await iprot.ReadBinaryAsync(cancellationToken);
                                    isset_row = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 3:
                                if (field.Type == TType.String)
                                {
                                    Family = await iprot.ReadBinaryAsync(cancellationToken);
                                    isset_family = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 4:
                                if (field.Type == TType.String)
                                {
                                    Qualifier = await iprot.ReadBinaryAsync(cancellationToken);
                                    isset_qualifier = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 5:
                                if (field.Type == TType.I32)
                                {
                                    CompareOp = (TCompareOp)await iprot.ReadI32Async(cancellationToken);
                                    isset_compareOp = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 6:
                                if (field.Type == TType.String)
                                {
                                    Value = await iprot.ReadBinaryAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 7:
                                if (field.Type == TType.Struct)
                                {
                                    RowMutations = new TRowMutations();
                                    await RowMutations.ReadAsync(iprot, cancellationToken);
                                    isset_rowMutations = true;
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                    if (!isset_table)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                    if (!isset_row)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                    if (!isset_family)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                    if (!isset_qualifier)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                    if (!isset_compareOp)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                    if (!isset_rowMutations)
                    {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                    }
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("checkAndMutate_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    field.Name = "table";
                    field.Type = TType.String;
                    field.ID = 1;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBinaryAsync(Table, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    field.Name = "row";
                    field.Type = TType.String;
                    field.ID = 2;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBinaryAsync(Row, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    field.Name = "family";
                    field.Type = TType.String;
                    field.ID = 3;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBinaryAsync(Family, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    field.Name = "qualifier";
                    field.Type = TType.String;
                    field.ID = 4;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBinaryAsync(Qualifier, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    field.Name = "compareOp";
                    field.Type = TType.I32;
                    field.ID = 5;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteI32Async((int)CompareOp, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    if (Value != null && __isset.@value)
                    {
                        field.Name = "value";
                        field.Type = TType.String;
                        field.ID = 6;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteBinaryAsync(Value, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    field.Name = "rowMutations";
                    field.Type = TType.Struct;
                    field.ID = 7;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await RowMutations.WriteAsync(oprot, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as checkAndMutateArgs;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return TCollections.Equals(Table, other.Table)
                  && TCollections.Equals(Row, other.Row)
                  && TCollections.Equals(Family, other.Family)
                  && TCollections.Equals(Qualifier, other.Qualifier)
                  && System.Object.Equals(CompareOp, other.CompareOp)
                  && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (TCollections.Equals(Value, other.Value))))
                  && System.Object.Equals(RowMutations, other.RowMutations);
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    hashcode = (hashcode * 397) + Table.GetHashCode();
                    hashcode = (hashcode * 397) + Row.GetHashCode();
                    hashcode = (hashcode * 397) + Family.GetHashCode();
                    hashcode = (hashcode * 397) + Qualifier.GetHashCode();
                    hashcode = (hashcode * 397) + CompareOp.GetHashCode();
                    if (__isset.@value)
                        hashcode = (hashcode * 397) + Value.GetHashCode();
                    hashcode = (hashcode * 397) + RowMutations.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("checkAndMutate_args(");
                sb.Append(", Table: ");
                sb.Append(Table);
                sb.Append(", Row: ");
                sb.Append(Row);
                sb.Append(", Family: ");
                sb.Append(Family);
                sb.Append(", Qualifier: ");
                sb.Append(Qualifier);
                sb.Append(", CompareOp: ");
                sb.Append(CompareOp);
                if (Value != null && __isset.@value)
                {
                    sb.Append(", Value: ");
                    sb.Append(Value);
                }
                sb.Append(", RowMutations: ");
                sb.Append(RowMutations == null ? "<null>" : RowMutations.ToString());
                sb.Append(")");
                return sb.ToString();
            }
        }


        public partial class checkAndMutateResult : TBase
        {
            private bool _success;
            private TIOError _io;

            public bool Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public TIOError Io
            {
                get
                {
                    return _io;
                }
                set
                {
                    __isset.io = true;
                    this._io = value;
                }
            }


            public Isset __isset;
            public struct Isset
            {
                public bool success;
                public bool io;
            }

            public checkAndMutateResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.Bool)
                                {
                                    Success = await iprot.ReadBoolAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    Io = new TIOError();
                                    await Io.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("checkAndMutate_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if (this.__isset.success)
                    {
                        field.Name = "Success";
                        field.Type = TType.Bool;
                        field.ID = 0;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteBoolAsync(Success, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    else if (this.__isset.io)
                    {
                        if (Io != null)
                        {
                            field.Name = "Io";
                            field.Type = TType.Struct;
                            field.ID = 1;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Io.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                var other = that as checkAndMutateResult;
                if (other == null) return false;
                if (ReferenceEquals(this, other)) return true;
                return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
                  && ((__isset.io == other.__isset.io) && ((!__isset.io) || (System.Object.Equals(Io, other.Io))));
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    if (__isset.success)
                        hashcode = (hashcode * 397) + Success.GetHashCode();
                    if (__isset.io)
                        hashcode = (hashcode * 397) + Io.GetHashCode();
                }
                return hashcode;
            }

            public override string ToString()
            {
                var sb = new StringBuilder("checkAndMutate_result(");
                bool __first = true;
                if (__isset.success)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success);
                }
                if (Io != null && __isset.io)
                {
                    if (!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Io: ");
                    sb.Append(Io == null ? "<null>" : Io.ToString());
                }
                sb.Append(")");
                return sb.ToString();
            }
        }

    }
}
